#Workflow
name: CI/CD Pipelines
on:
  push:
    branches:
      - '*'
      - '!master'
      - '!dev'
  pull_request:
    types: [ closed ]

jobs:
  #Job 1 Test
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job 1 Test steps
    steps:
      #Check-out created repository
      - uses: actions/checkout@v1
      #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      #Set up Gradle cache
      - name: Cache Maven packages
        #Caching dependencies
        #This will reduce the time
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Unit Tests
      - name: Run Tests
        run: ./gradlew test
  #Job 2 Build
  build:
    needs: tests
    name: Build
    #Run on Ubuntu
    runs-on: ubuntu-latest
    steps:
      #Check-out created repository
      - uses: actions/checkout@v1
      #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      #Set up Gradle cache
      - name: Cache Maven packages
        #caching dependencies.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using gradle
      - name: Build with Maven
        run: ./gradlew build
      #Build the application using Gradle
      - name: Upload JAR
        #Uploads artifacts and share between jobs.
        uses: actions/upload-artifact@v2
        with:
          #artifact name
          name: artifact
          #Build path of the jar file
          path: build/libs/demo-0.0.1-SNAPSHOT.jar
  #Job 3 Deploy
  deploy-to-dev:
    #This will depend on job 2 - build job
    needs: build
    name: Deploy To Dev
    #Run on Ubuntu
    runs-on: ubuntu-latest
    if: github.ref == 'dev' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Download JAR
        #Download the artifact - Jar file which was uploaded previously
        uses: actions/download-artifact@v2
        with:
          name: artifact
      #Deploy the JAR into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          environment_name: spring-boot-deploy-dev
          application_name: spring-boot-deploy-dev
          version_label: ${{github.SHA}}
          region: us-east-2
          deployment_package: demo-0.0.1-SNAPSHOT.jar
  deploy-to-production:
    #Deploy to production steps
    needs: build
    name: Deploy To Production
    #Run on Ubuntu
    runs-on: ubuntu-latest
    if: github.ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Download JAR
        #Download the artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact
      #Deploy the JAR into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          environment_name: spring-boot-deploy-prod
          application_name: spring-boot-deploy-prod
          version_label: ${{github.SHA}}
          region: us-east-2
          deployment_package: demo-0.0.1-SNAPSHOT.jar